name: PR
on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - '**/README.md'
      - '**/docs'
      - 'mkdocs.yaml'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      id-token: write
      packages: write
      contents: read
      pull-requests: write
    steps:
      - name: Dump context for debugging
        if: ${{ true }}
        run: |
          echo "$GITHUB_CONTEXT"
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies with audit
        run: |
          npm ci
          npm audit check --omit=dev --audit-level=high
          npm run lint
          npm run build

      - name: Run tests
        run: npm run test

      - name: Build and push docker
        id: docker
        uses: ./.github/actions/docker-build
        with:
          labels: |
            org.opencontainers.image.title=Otel Demo
            org.opencontainers.image.description=Nest.Js with OTEL and other random experimentation
          github-token: ${{ secrets.GITHUB_TOKEN }}
        env:
          DOCKER_BUILDKIT: 1

      - name: Parse Meta
        id: parse-meta
        run: |
          IMAGE_LIST=$(jq -r '.["image.name"]' <<< '${{ steps.docker.outputs.docker-metadata }}' | tr ',' '\n')
          #echo "images='\"$IMAGE_LIST\"'" >> "$GITHUB_OUTPUT"
          {
            echo 'images<<EOF'
            echo "$IMAGE_LIST"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Comment PR
        if: ${{ steps.docker.outputs.digest }}
        uses: marocchino/sticky-pull-request-comment@efaaab3fd41a9c3de579aba759d2552635e590fd # v2.8.0
        with:
          # hide_and_recreate: true
          # hide_classify: 'OUTDATED'
          message: |
            Image tags published from ${{ github.workflow }}/${{ github.run_number }} at ${{ github.event.pull_request.updated_at }}
             
            ```text
            ${{ steps.parse-meta.outputs.images }}
            ```

            Metadata:

            ```json
            ${{ steps.docker.outputs.docker-metadata }}
            ```
