---
name: Publish Docs
description: Publish documentation for Backstage
# see https://backstage.io/docs/features/techdocs/configuring-ci-cd
inputs:
  iam-role:
    description: >-
      IAM role to assume prior to publishing.
      If not set publishing is disabled (only builds docs).
    required: false
  aws-region:
    description: AWS region for assume role
    default: us-west-2
    required: false
  bucket-name:
    description: S3 bucket name
    default: xealth-techdocs
    required: false
  entity:
    description: >-
      The entity to publish. This normally corresponds to the resource name for
      the component defined in catalog-info.yaml at the root of the repository folder.
    default: default/Component/${{ github.event.repository.name }}
    required: true
runs:
  using: composite
  steps:
    - name: Install techdocs-cli
      shell: bash
      run: |
        npm install -g @techdocs/cli
        pip install mkdocs-techdocs-core==1.*

    - name: Run techdocs-cli (generate doc site)
      shell: bash
      run: |
        techdocs-cli generate --no-docker

    - name: Generate role sesion name
      shell: bash
      run: |
        echo "ROLE_SESSION_NAME=gha.publish@${REPO//\//.}" | tee -a $GITHUB_ENV
      env:
        REPO: ${{ github.repository }}

    - name: Reset AWS creds
      shell: bash
      run: |
        # https://github.com/aws-actions/configure-aws-credentials/issues/236
        echo "AWS_ACCESS_KEY_ID=" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=" >> $GITHUB_ENV
        echo "AWS_SESSION_TOKEN=" >> $GITHUB_ENV

    - name: Configure AWS credentials
      if: ${{ inputs.iam-role != '' }}
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ inputs.iam-role }}
        aws-region: ${{ inputs.aws-region }}
        role-session-name: ${{ env.ROLE_SESSION_NAME }}

    ##
    # Ends up on s3://BUCKET/default/component/META-NAME/index.html
    #
    # Publish whenever we push to the main branch since the documentation
    # is tied to the repository and not particular releases.
    #
    - name: Publish docs to S3
      if: ${{ inputs.iam-role != '' && (github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'preview')) }}
      shell: bash
      run: |
        techdocs-cli publish \
          --publisher-type awsS3 \
          --storage-name ${{ inputs.bucket-name }} \
          --entity ${{ inputs.entity }}
